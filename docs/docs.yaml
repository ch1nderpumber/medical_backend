---
  openapi: "3.0.0"
  info: 
    title: "Сервис контроля качества"
    description: "Данный сервис определяет основные API методы"
    version: "1.0.0"
    contact: 
      name: "Dmitriy Prokhorov"
      email: "dmitriy.prokhorov.04@gmail.com"
  paths: 
    /api/auth/login: 
      post: 
        requestBody: 
          content: 
            application/json: 
              schema: 
                $ref: "#/components/schemas/SignInDTO"
          required: true
        description: "Авторизация пользователя"
        tags: 
          - "Авторизация (пользователь)"
        responses: 
          200: 
            description: "Авторизационные данные пользователя и пара токенов."
            content: 
              application/json: 
                schema: 
                  $ref: "#/components/schemas/AuthorizationDTO"
          400: 
            description: "[VALIDATION_ERROR] Одно или несколько полей содержат ошибку."
    /api/auth/registration: 
      post: 
        requestBody: 
          content: 
            application/json: 
              schema: 
                $ref: "#/components/schemas/SignUpDTO"
          required: true
        description: "Ригистрация пользователя"
        tags: 
          - "Авторизация (пользователь)"
        responses: 
          200: 
            description: "Авторизационные данные пользователя и пара токенов."
            content: 
              application/json: 
                schema: 
                  $ref: "#/components/schemas/AuthorizationDTO"
          400: 
            description: "[VALIDATION_ERROR] Одно или несколько полей содержат ошибку."
    /api/auth/sendResetPassword: 
      post: 
        requestBody: 
          $ref: "#/components/requestBodies/EmailDTO"
        description: "Отправит запрос на сброс пароля, на почту придет письмо с инструкцией"
        tags: 
          - "Авторизация (пользователь)"
        responses: 
          200: 
            description: "Успешный ли запрос"
            content: 
              application/json: 
                schema: 
                  $ref: "#/components/schemas/RequestSuccessDTO"
          400: 
            description: "[VALIDATION_ERROR] Одно или несколько полей содержат ошибку."
    /api/auth/resetPassword/:uuid: 
      post: 
        parameters: 
          - 
            name: "uuid"
            in: "params"
            description: "UUID сброса пароля."
            required: true
            schema: 
              type: "string"
        requestBody: 
          $ref: "#/components/requestBodies/EmailDTO"
        description: "Изменит пароль пользователя"
        tags: 
          - "Авторизация (пользователь)"
        responses: 
          200: 
            description: "Авторизационные данные пользователя и пара токенов."
            content: 
              application/json: 
                schema: 
                  $ref: "#/components/schemas/AuthorizationDTO"
          400: 
            description: "[VALIDATION_ERROR] Одно или несколько полей содержат ошибку."
    /api/auth/refresh: 
      post: 
        parameters: 
          - 
            name: "refresh_token"
            in: "header"
            description: "refresh_token"
            required: true
            schema: 
              type: "string"
        description: "Обновить токены (refresh)"
        tags: 
          - "Авторизация (пользователь)"
        responses: 
          200: 
            description: "Пара токенов."
            content: 
              application/json: 
                schema: 
                  $ref: "#/components/schemas/TokenDTO"
          400: 
            description: "[INVALID_REFRESH_TOKEN] Неверный токен."
    /api/permission/give: 
      post: 
        requestBody: 
          $ref: "#/components/requestBodies/PermissionInputDTO"
        description: "Выдача разрешения пользователю"
        tags: 
          - "Разрешения"
        responses: 
          200: 
            description: "Разрешение выдано."
          400: 
            description: "[PERMISSION_NOT_FOUND] Разрешение не найдено."
    /api/permission/takeAway: 
      post: 
        requestBody: 
          $ref: "#/components/requestBodies/PermissionInputDTO"
        description: "Лишение пользователя разрешения"
        tags: 
          - "Разрешения"
        responses: 
          200: 
            description: "Пользователь лишен разрешения."
          400: 
            description: "[PERMISSION_NOT_FOUND] Разрешение не найдено."
    /api/permission: 
      get: 
        parameters: 
          - 
            name: "userId"
            in: "query"
            required: true
            schema: 
              type: "string"
        description: "Получение разрешений пользователя по id"
        tags: 
          - "Разрешения"
        responses: 
          200: 
            description: "Разрешения пользователя."
            content: 
              application/json: 
                schema: 
                  type: "array"
                  items: 
                    $ref: "#/components/schemas/PermissionDTO"
          400: 
            description: "[USER_NOT_FOUND] Пользователь не найден."
    /api/permission/getAllAvailable: 
      post: 
        description: "Получение всех достпных разрешений"
        tags: 
          - "Разрешения"
        responses: 
          200: 
            description: "Все доступные разрешения."
            content: 
              application/json: 
                schema: 
                  type: "array"
                  items: 
                    $ref: "#/components/schemas/PermissionDTO"
    /api/product/reject: 
      post: 
        requestBody: 
          content: 
            application/json: 
              schema: 
                $ref: "#/components/schemas/RejectInputDTO"
          required: true
        description: "Добавление типа дефакта (отклонения)"
        tags: 
          - "Парамтеры продукта"
        responses: 
          200: 
            description: "Вернет созданный тип дефекта (отклонение)."
            content: 
              application/json: 
                schema: 
                  $ref: "#/components/schemas/RejectDTO"
          400: 
            description: "[REJECT_INVALID] Неверное наименовние типа дефекта (отклонения)."
      put: 
        requestBody: 
          content: 
            application/json: 
              schema: 
                $ref: "#/components/schemas/RejectDTO"
          required: true
        description: "Изменение типа дефакта (отклонения)"
        tags: 
          - "Парамтеры продукта"
        responses: 
          200: 
            description: "Вернет измененный тип дефекта (отклонение)."
            content: 
              application/json: 
                schema: 
                  $ref: "#/components/schemas/RejectDTO"
          400: 
            description: "[REJECT_INVALID] Неверное наименовние типа дефекта (отклонения)."
      get: 
        parameters: 
          - 
            name: "id"
            in: "query"
            required: false
            schema: 
              type: "string"
        description: "Получение типа дефакта (отклонения)"
        tags: 
          - "Парамтеры продукта"
        responses: 
          200: 
            description: "Вернет тип дефекта (отклонение)."
            content: 
              application/json: 
                schema: 
                  $ref: "#/components/schemas/RejectDTO"
          201: 
            description: "Вернет тип дефекта (отклонение) или массив ип дефекта (отклонение), если не указывать id."
            content: 
              application/json: 
                schema: 
                  type: "array"
                  items: 
                    $ref: "#/components/schemas/RejectDTO"
          400: 
            description: "[REJECT_INVALID] Неверное наименовние типа дефекта (отклонения)."
    /api/product/reject/move: 
      put: 
        parameters: 
          - 
            name: "activeId"
            in: "input"
            required: false
            schema: 
              type: "number"
          - 
            name: "overId"
            in: "input"
            required: false
            schema: 
              type: "number"
        description: "Перемещение дефактов (изменеение положение дефектов при получении данных)"
        tags: 
          - "Парамтеры продукта"
        responses: 
          200: 
            description: "Запрос выполнен."
          400: 
            description: "[INVALID_MOVE_KEYS] Ключи для перемещения неверны"
    /api/product/round: 
      post: 
        requestBody: 
          $ref: "#/components/requestBodies/ShiftInputDTO"
        description: "Добавление смены"
        tags: 
          - "Парамтеры продукта"
        responses: 
          200: 
            description: "Вернет созданный размер."
            content: 
              application/json: 
                schema: 
                  $ref: "#/components/schemas/ShiftDTO"
          400: 
            description: "[SHIFT_INVALID] Неверное наименовние размера."
      put: 
        requestBody: 
          $ref: "#/components/requestBodies/ShiftDTO"
        description: "Изменение смены"
        tags: 
          - "Парамтеры продукта"
        responses: 
          200: 
            description: "Вернет измененный размер."
            content: 
              application/json: 
                schema: 
                  $ref: "#/components/schemas/ShiftDTO"
          400: 
            description: "[SHIFT_INVALID] Неверное наименовние размера."
      get: 
        parameters: 
          - 
            name: "id"
            in: "query"
            required: false
            schema: 
              type: "string"
        description: "Получение смены"
        tags: 
          - "Парамтеры продукта"
        responses: 
          200: 
            description: "Вернет смену или массив смен, если не указывать id."
            content: 
              application/json: 
                schema: 
                  $ref: "#/components/schemas/ShiftDTO"
          201: 
            description: "Вернет смену или массив смен, если не указывать id."
            content: 
              application/json: 
                schema: 
                  type: "array"
                  items: 
                    $ref: "#/components/schemas/ShiftDTO"
          400: 
            description: "[SHIFT_INVALID] Неверное наименовние смены."
    /api/product/shift: 
      post: 
        requestBody: 
          $ref: "#/components/requestBodies/ShiftInputDTO"
        description: "Добавление смены"
        tags: 
          - "Парамтеры продукта"
        responses: 
          200: 
            description: "Вернет созданный размер."
            content: 
              application/json: 
                schema: 
                  $ref: "#/components/schemas/ShiftDTO"
          400: 
            description: "[SHIFT_INVALID] Неверное наименовние размера."
      put: 
        requestBody: 
          $ref: "#/components/requestBodies/ShiftDTO"
        description: "Изменение смены"
        tags: 
          - "Парамтеры продукта"
        responses: 
          200: 
            description: "Вернет измененный размер."
            content: 
              application/json: 
                schema: 
                  $ref: "#/components/schemas/ShiftDTO"
          400: 
            description: "[SHIFT_INVALID] Неверное наименовние размера."
      get: 
        parameters: 
          - 
            name: "id"
            in: "query"
            required: false
            schema: 
              type: "string"
        description: "Получение смены"
        tags: 
          - "Парамтеры продукта"
        responses: 
          200: 
            description: "Вернет смену или массив смен, если не указывать id."
            content: 
              application/json: 
                schema: 
                  $ref: "#/components/schemas/ShiftDTO"
          201: 
            description: "Вернет смену или массив смен, если не указывать id."
            content: 
              application/json: 
                schema: 
                  type: "array"
                  items: 
                    $ref: "#/components/schemas/ShiftDTO"
          400: 
            description: "[SHIFT_INVALID] Неверное наименовние смены."
    /api/product/size: 
      post: 
        requestBody: 
          $ref: "#/components/requestBodies/SizeInputDTO"
        description: "Добавление размера"
        tags: 
          - "Парамтеры продукта"
        responses: 
          200: 
            description: "Вернет созданный размер."
            content: 
              application/json: 
                schema: 
                  $ref: "#/components/schemas/SizeDTO"
          400: 
            description: "[SIZE_INVALID] Неверное наименовние размера."
      put: 
        requestBody: 
          $ref: "#/components/requestBodies/SizeDTO"
        description: "Изменение размера"
        tags: 
          - "Парамтеры продукта"
        responses: 
          200: 
            description: "Вернет измененный размер."
            content: 
              application/json: 
                schema: 
                  $ref: "#/components/schemas/SizeDTO"
          400: 
            description: "[SIZE_INVALID] Неверное наименовние размера."
      get: 
        parameters: 
          - 
            name: "id"
            in: "query"
            required: false
            schema: 
              type: "string"
        description: "Получение размера"
        tags: 
          - "Парамтеры продукта"
        responses: 
          200: 
            description: "Вернет размер или массив размеров, если не указывать id."
            content: 
              application/json: 
                schema: 
                  $ref: "#/components/schemas/SizeDTO"
          201: 
            description: "Вернет размер или массив размеров, если не указывать id."
            content: 
              application/json: 
                schema: 
                  type: "array"
                  items: 
                    $ref: "#/components/schemas/SizeDTO"
          400: 
            description: "[SIZE_INVALID] Неверное наименовние размера."
    /api/product/style: 
      post: 
        requestBody: 
          $ref: "#/components/requestBodies/SizeInputDTO"
        description: "Добавление стиля"
        tags: 
          - "Парамтеры продукта"
        responses: 
          200: 
            description: "Вернет созданный стиль."
            content: 
              application/json: 
                schema: 
                  $ref: "#/components/schemas/SizeDTO"
          400: 
            description: "[STYLE_INVALID] Неверное наименовние стиля."
      put: 
        requestBody: 
          $ref: "#/components/requestBodies/SizeDTO"
        description: "Изменение стиля"
        tags: 
          - "Парамтеры продукта"
        responses: 
          200: 
            description: "Вернет измененный стиль."
            content: 
              application/json: 
                schema: 
                  $ref: "#/components/schemas/SizeDTO"
          400: 
            description: "[STYLE_INVALID] Неверное наименовние размера."
      get: 
        parameters: 
          - 
            name: "id"
            in: "query"
            required: false
            schema: 
              type: "string"
        description: "Получение стияля"
        tags: 
          - "Парамтеры продукта"
        responses: 
          200: 
            description: "Вернет стиль."
            content: 
              application/json: 
                schema: 
                  $ref: "#/components/schemas/SizeDTO"
          201: 
            description: "Вернет стиль или массив стилей, если не указывать id."
            content: 
              application/json: 
                schema: 
                  type: "array"
                  items: 
                    $ref: "#/components/schemas/SizeDTO"
          400: 
            description: "[STYLE_INVALID] Неверное наименовние стиля."
    /api/user/:id: 
      get: 
        parameters: 
          - 
            name: "id"
            in: "params"
            required: true
            schema: 
              type: "string"
        description: "Получение пользователя по id"
        tags: 
          - "Пользователь"
        responses: 
          200: 
            description: "Вернет пользоввателя."
            content: 
              application/json: 
                schema: 
                  $ref: "#/components/schemas/UserDTO"
          400: 
            description: "[USER_NOT_FOUND]"
      delete: 
        parameters: 
          - 
            name: "id"
            in: "params"
            required: true
            schema: 
              type: "string"
        description: "Удаление пользователя по id"
        tags: 
          - "Пользователь"
        responses: 
          200: 
            description: "Пользователь удален."
          400: 
            description: "[USER_NOT_FOUND]"
      put: 
        parameters: 
          - 
            name: "id"
            in: "params"
            required: true
            schema: 
              type: "string"
        requestBody: 
          $ref: "#/components/requestBodies/UserWithoutIdDTO"
        description: "Обновление данных пользователя"
        tags: 
          - "Пользователь"
        responses: 
          200: 
            description: "Вернет обновленного пользователя."
            content: 
              application/json: 
                schema: 
                  $ref: "#/components/schemas/UserDTO"
    /api/user: 
      post: 
        requestBody: 
          $ref: "#/components/requestBodies/UserWithoutIdDTO"
        description: "Создание пользователя"
        tags: 
          - "Пользователь"
        responses: 
          200: 
            description: "Вернет созданного пользователя."
            content: 
              application/json: 
                schema: 
                  $ref: "#/components/schemas/UserDTO"
  tags: 
    - 
      name: "Авторизация (пользователь)"
      description: "Методы авторизации пользователя"
    - 
      name: "Разрешения"
      description: "Методы добавления, изменения и просмотра разрешений"
    - 
      name: "Парамтеры продукта"
      description: "Методы добавления, изменения и просмотра парамтеров продукта"
    - 
      name: "Пользователь"
      description: "Методы добавления, изменения и просмотра пользователей"
  servers: 
    - 
      url: "http://localhost:8080"
  components: 
    requestBodies: 
      PermissionInputDTO: 
        content: 
          application/json: 
            schema: 
              $ref: "#/components/schemas/PermissionInputDTO"
        required: true
      ShiftInputDTO: 
        content: 
          application/json: 
            schema: 
              $ref: "#/components/schemas/ShiftInputDTO"
        required: true
      UserWithoutIdDTO: 
        content: 
          application/json: 
            schema: 
              $ref: "#/components/schemas/UserWithoutIdDTO"
        required: true
      EmailDTO: 
        content: 
          application/json: 
            schema: 
              $ref: "#/components/schemas/EmailDTO"
        required: true
      ShiftDTO: 
        content: 
          application/json: 
            schema: 
              $ref: "#/components/schemas/ShiftDTO"
        required: true
      SizeInputDTO: 
        content: 
          application/json: 
            schema: 
              $ref: "#/components/schemas/SizeInputDTO"
        required: true
      SizeDTO: 
        content: 
          application/json: 
            schema: 
              $ref: "#/components/schemas/SizeDTO"
        required: true
    securitySchemes: 
      JWT: 
        type: "apiKey"
        in: "header"
        name: "Authorization"
        description: ""
    schemas: 
      AuthorizationDTO: 
        required: 
          - "user"
          - "tokens"
        properties: 
          user: 
            $ref: "#/components/schemas/UserDTO"
          tokens: 
            $ref: "#/components/schemas/TokenDTO"
      EmailDTO: 
        required: 
          - "email"
        properties: 
          email: 
            type: "string"
            description: ""
      PermissionInputDTO: 
        required: 
          - "userId"
          - "permissionId"
        properties: 
          userId: 
            type: "string"
            description: ""
          permissionId: 
            type: "string"
            description: ""
      PermissionDTO: 
        required: 
          - "userId"
          - "value"
          - "name"
        properties: 
          userId: 
            type: "string"
            description: ""
          value: 
            type: "string"
            description: ""
          name: 
            type: "string"
            description: ""
      RejectInputDTO: 
        required: 
          - "name"
        properties: 
          name: 
            type: "string"
            description: ""
      RejectDTO: 
        required: 
          - "id"
          - "name"
          - "active"
          - "key"
        properties: 
          id: 
            type: "string"
            description: ""
          name: 
            type: "string"
            description: ""
          active: 
            type: "boolean"
            description: ""
          key: 
            type: "number"
            description: ""
      RequestSuccessDTO: 
        required: 
          - "success"
        properties: 
          success: 
            type: "boolean"
            description: ""
      RoundInputDTO: 
        required: 
          - "value"
        properties: 
          value: 
            type: "number"
            description: ""
      RoundDTO: 
        required: 
          - "id"
          - "value"
          - "active"
        properties: 
          id: 
            type: "string"
            description: ""
          value: 
            type: "number"
            description: ""
          active: 
            type: "boolean"
            description: ""
      ShiftInputDTO: 
        required: 
          - "value"
        properties: 
          value: 
            type: "number"
            description: ""
      ShiftDTO: 
        required: 
          - "id"
          - "value"
          - "active"
        properties: 
          id: 
            type: "string"
            description: ""
          value: 
            type: "number"
            description: ""
          active: 
            type: "boolean"
            description: ""
      SignInDTO: 
        required: 
          - "email"
          - "password"
        properties: 
          email: 
            type: "string"
            description: ""
          password: 
            type: "string"
            description: ""
      SignUpDTO: 
        required: 
          - "email"
          - "name"
          - "lastname"
          - "patronymic"
          - "password"
        properties: 
          email: 
            type: "string"
            description: ""
          name: 
            type: "string"
            description: ""
          lastname: 
            type: "string"
            description: ""
          patronymic: 
            type: "string"
            description: ""
          password: 
            type: "string"
            description: ""
      SizeInputDTO: 
        required: 
          - "value"
        properties: 
          value: 
            type: "string"
            description: ""
      SizeDTO: 
        required: 
          - "id"
          - "value"
          - "active"
        properties: 
          id: 
            type: "string"
            description: ""
          value: 
            type: "string"
            description: ""
          active: 
            type: "boolean"
            description: ""
      StyleInputDTO: 
        required: 
          - "value"
        properties: 
          value: 
            type: "string"
            description: ""
      StyleDTO: 
        required: 
          - "id"
          - "value"
          - "active"
        properties: 
          id: 
            type: "string"
            description: ""
          value: 
            type: "string"
            description: ""
          active: 
            type: "boolean"
            description: ""
      TokenDTO: 
        required: 
          - "access_token"
          - "refresh_token"
        properties: 
          access_token: 
            type: "string"
            description: ""
          refresh_token: 
            type: "string"
            description: ""
      UserDTO: 
        required: 
          - "id"
          - "email"
          - "name"
          - "lastname"
          - "patronymic"
        properties: 
          id: 
            type: "string"
            description: ""
          email: 
            type: "string"
            description: ""
          name: 
            type: "string"
            description: ""
          lastname: 
            type: "string"
            description: ""
          patronymic: 
            type: "string"
            description: ""
      UserWithoutIdDTO: 
        required: 
          - "user"
          - "count"
        properties: 
          user: 
            $ref: "#/components/schemas/UserDTO"
          count: 
            type: "number"
            description: ""
